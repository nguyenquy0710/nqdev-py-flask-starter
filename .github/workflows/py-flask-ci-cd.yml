# -----------------------------------------------------------------------------
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# Accessing contextual information about workflow runs: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
# -----------------------------------------------------------------------------

# Python CI/CD Workflow: build, test, package, dockerize, and release
name: "Python CI/CD with Flask and Docker"
run-name: "Python CI/CD with Flask and Docker on ${{ github.event_name }} by @${{ github.actor }}"

on:
  workflow_dispatch: # ✅ Cho phép chạy thủ công
    inputs:
      subversion:
        description: "SubVersion"
        required: false
        type: string
  # push:
  #   branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [created] # ✅ Tự động trigger khi tạo GitHub release

# Remove all permissions by default
permissions: write-all # ⚠️ Nếu không cần ghi tất cả, bạn nên dùng principle of least privilege

env:
  SERVER: production
  VERSION: "1.0.${{ github.run_number }}" # ✅ Default nếu không đọc từ file VERSION
  REPO_NAME: # ✅ Sẽ được gán động trong steps

jobs:
  # ✅ JOB 1: Build & Test Python
  build-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        # The list of all available versions can be found here:
        # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
        python-version: [3.11.2]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Fix encoding of requirements.txt
        run: |
          # Remove null bytes from requirements.txt
          sed -i 's/\x00//g' requirements.txt
          # Convert to UTF-8 without BOM (optional)
          iconv -f utf-8 -t utf-8 -c requirements.txt -o requirements.txt

      - name: Extract and lowercase repo name
        run: echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY##*/} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set VERSION
        uses: ./.github/actions/set-version

      - name: Write version file
        run: echo "${{ env.VERSION }}" > .version.txt

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest coverage build
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # ✅ Phân tích static code và cảnh báo
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true # fail khi có lỗi nghiêm trọng

      - name: Test with pytest
        run: |
          coverage run -m pytest
          coverage report
        continue-on-error: true # fail khi có lỗi nghiêm trọng

      - name: Build Python package
        run: python -m build # ✅ Output ra dist/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |
            .version.txt
            dist/*

  # ✅ JOB 2: Release lên GitHub Releases
  release:
    name: Release Python Package
    needs: build-test
    runs-on: ubuntu-latest

    # ✅ Chỉ trigger nếu sự kiện là release
    if: github.event_name == 'release'

    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release-files

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            .version.txt
            dist/*

  # ✅ JOB 3: Build & Push Docker image
  docker-deploy:
    name: Build and push Docker image
    needs: build-test
    runs-on: ubuntu-latest

    # ✅ Chỉ chạy khi push lên main hoặc release
    if: github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract and lowercase repo name
        run: echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY##*/} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set VERSION
        uses: ./.github/actions/set-version

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Sử dụng GitHub token mặc định

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ env.VERSION }} \
                       -t ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}:latest \
                       -f ./Dockerfile .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}:latest
